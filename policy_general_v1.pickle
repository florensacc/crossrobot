ccopy_reg
_reconstructor
p1
(c__main__
SimpleNN
p2
c__builtin__
object
p3
NtRp4
(dp5
S'outputLayer'
p6
g1
(c__main__
HiddenLayer
p7
g3
NtRp8
(dp9
S'b'
g1
(ctheano.tensor.sharedvar
TensorSharedVariable
p10
g3
NtRp11
(dp12
S'auto_name'
p13
S'auto_2279034'
p14
sS'index'
p15
NsS'tag'
p16
(itheano.gof.utils
scratchpad
p17
(dp18
S'trace'
p19
(lp20
(lp21
(S'/usr/local/lib/python2.7/site-packages/theano/compile/sharedvalue.py'
p22
I248
S'shared'
p23
S'utils.add_tag_trace(var)'
tp24
aasbsS'container'
p25
g1
(ctheano.gof.link
Container
p26
g3
NtRp27
(dp28
S'name'
p29
S'b'
sS'storage'
p30
(lp31
cnumpy.core.multiarray
_reconstruct
p32
(cnumpy
ndarray
p33
(I0
tS'b'
tRp34
(I1
(I1
tcnumpy
dtype
p35
(S'f8'
I0
I1
tRp36
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x81:\x1c5\x04q-@'
tbasS'strict'
p37
I00
sS'readonly'
p38
I00
sS'type'
p39
g1
(ctheano.tensor.type
TensorType
p40
g3
NtRp41
(dp42
S'broadcastable'
p43
(I00
tp44
sS'dtype'
p45
S'float64'
p46
sS'numpy_dtype'
p47
g36
sS'sparse_grad'
p48
I00
sg29
NsbsS'allow_downcast'
p49
Nsbsg29
S'b'
sS'owner'
p50
Nsg39
g41
sbsS'activation'
p51
NsS'params'
p52
(lp53
g1
(g10
g3
NtRp54
(dp55
g13
S'auto_2279033'
p56
sg15
Nsg16
(itheano.gof.utils
scratchpad
p57
(dp58
g19
(lp59
(lp60
(g22
I248
g23
S'utils.add_tag_trace(var)'
tp61
aasbsg25
g1
(g26
g3
NtRp62
(dp63
g29
S'W'
sg30
(lp64
g32
(g33
(I0
tS'b'
tRp65
(I1
(I25
I1
tg36
I00
S'\xec\xdam\xa2\xdd\xf7\xd2\xbf\x9c\xf4\x10\xab\x92\x08\xbe?\xcbG\xb5\x8c\x04t\x1d@n\x9e\xff\x12\x03:\xe7\xbf<\xd17\x17\x08d\xe7\xbfr\xeeg\rY\xf7\xcb\xbf\x9e\xbc(j\xc5\xba/\xc0\xff9\x04\xde\x13\xb8\xe6\xbf\x05\x95\x80\xc6\'|\t\xc0\xeeMgV\xbdl\xe4\xbf\xc9\xb1\x7f\xa2\xbf\xa0\xeb?\x00P\xa5[:TO?\xe9a\xf6h\x06\\\xea\xbf\x94\xfe\xc8\x0b;(\xe9\xbf9\xf1\x7f\x12\x851\x19@\xc6\xe5iD\xe9:\xe9\xbf\x1ezEm)\xdc\xed\xbf4\xc7\x862"\xba#\xc0Q8\x82=\x19>\xe7\xbf\xe7M\x0b\xb2\xb3\xd3\x08@.;\xce\xe0VT$\xc0\xb5\x1d\xd8\xff\x93D\xec\xbf\x86\x0c\xfeb\x06\x1c\xda\xbf\x00\x05\xf1+\x8c\xf7\xeb?\x0c\x0bt\x08\xeb\xae\xe2\xbf'
tbasg37
I00
sg38
I00
sg39
g1
(g40
g3
NtRp66
(dp67
g43
(I00
I00
tp68
sg45
S'float64'
p69
sg47
g36
sg48
I00
sg29
Nsbsg49
Nsbsg29
S'W'
sg50
Nsg39
g66
sbag11
asS'W'
g54
sS'output'
p70
g1
(ctheano.tensor.var
TensorVariable
p71
g3
NtRp72
(dp73
g13
S'auto_2279040'
p74
sg15
I0
sg16
(itheano.gof.utils
scratchpad
p75
(dp76
g19
(lp77
(lp78
(S'<ipython-input-147-49abcd1821d4>'
p79
I57
S'__init__'
p80
Vlin_output = T.dot(input, self.W) + self.b
tp81
aasbsg29
Nsg50
g1
(ctheano.gof.graph
Apply
p82
g3
NtRp83
(dp84
S'inputs'
p85
(lp86
g1
(g71
g3
NtRp87
(dp88
g13
S'auto_2279035'
p89
sg15
I0
sg16
(itheano.gof.utils
scratchpad
p90
(dp91
g19
(lp92
(lp93
(g79
I57
g80
Vlin_output = T.dot(input, self.W) + self.b
tp94
aasbsg29
Nsg50
g1
(g82
g3
NtRp95
(dp96
g85
(lp97
g1
(g71
g3
NtRp98
(dp99
g13
S'auto_2279032'
p100
sg15
I0
sg16
(itheano.gof.utils
scratchpad
p101
(dp102
g19
(lp103
(lp104
(g79
I60
g80
Velse activation(lin_output)
tp105
aasbsg29
Nsg50
g1
(g82
g3
NtRp106
(dp107
g85
(lp108
g1
(g71
g3
NtRp109
(dp110
g13
S'auto_2279031'
p111
sg15
I0
sg16
(itheano.gof.utils
scratchpad
p112
(dp113
bsg29
Nsg50
g1
(g82
g3
NtRp114
(dp115
g85
(lp116
g1
(ctheano.tensor.var
TensorConstant
p117
g3
NtRp118
(dp119
g13
S'auto_2279027'
p120
sg15
Nsg16
(itheano.gof.utils
scratchpad
p121
(dp122
S'unique_value'
p123
Nsbsg29
Nsg39
g1
(g40
g3
NtRp124
(dp125
g43
(tsg45
S'float32'
p126
sg47
g35
(S'f4'
I0
I1
tRp127
(I3
S'<'
NNNI-1
I-1
I0
tbsg48
I00
sg29
NsbsS'data'
p128
g32
(g33
(I0
tS'b'
tRp129
(I1
(tg127
I00
S'\x00\x00\x00?'
tbsbasg16
(itheano.gof.utils
scratchpad
p130
(dp131
bsS'outputs'
p132
(lp133
g109
asS'op'
p134
g1
(ctheano.tensor.elemwise
DimShuffle
p135
g3
NtRp136
(dp137
S'drop'
p138
(lp139
sS'shuffle'
p140
(lp141
sS'augment'
p142
(lp143
I0
aI1
asS'input_broadcastable'
p144
(tsS'inplace'
p145
I00
sS'new_order'
p146
(S'x'
S'x'
tp147
sS'_op_use_c_code'
p148
S'/usr/bin/clang++'
p149
sbsbsg39
g1
(g40
g3
NtRp150
(dp151
g43
(I01
I01
tp152
sg45
g126
sg47
g127
sg48
I00
sg29
Nsbsbag1
(g71
g3
NtRp153
(dp154
g13
S'auto_2279026'
p155
sg15
I0
sg16
(itheano.gof.utils
scratchpad
p156
(dp157
g19
(lp158
(lp159
(g79
I60
g80
Velse activation(lin_output)
tp160
aasbsg29
Nsg50
g1
(g82
g3
NtRp161
(dp162
g85
(lp163
g1
(g71
g3
NtRp164
(dp165
g13
S'auto_2279019'
p166
sg15
I0
sg16
(itheano.gof.utils
scratchpad
p167
(dp168
g19
(lp169
(lp170
(g79
I57
g80
Vlin_output = T.dot(input, self.W) + self.b
tp171
aasbsg29
Nsg50
g1
(g82
g3
NtRp172
(dp173
g85
(lp174
g1
(g71
g3
NtRp175
(dp176
g13
S'auto_2279014'
p177
sg15
I0
sg16
(itheano.gof.utils
scratchpad
p178
(dp179
g19
(lp180
(lp181
(g79
I57
g80
Vlin_output = T.dot(input, self.W) + self.b
tp182
aasbsg29
Nsg50
g1
(g82
g3
NtRp183
(dp184
g85
(lp185
g1
(g71
g3
NtRp186
(dp187
g13
S'auto_2279010'
p188
sg15
Nsg16
(itheano.gof.utils
scratchpad
p189
(dp190
g19
(lp191
(lp192
(S'<ipython-input-375-1e170a2a59ab>'
p193
I89
S'train_NN'
p194
Vx = T.matrix('x')  # the data is presented as a matrix of positions
tp195
aasbsg29
S'x'
sg50
Nsg39
g1
(g40
g3
NtRp196
(dp197
g43
(I00
I00
tp198
sg45
S'float64'
p199
sg47
g36
sg48
I00
sg29
Nsbsbag1
(g10
g3
NtRp200
(dp201
g13
S'auto_2279012'
p202
sg15
Nsg16
(itheano.gof.utils
scratchpad
p203
(dp204
g19
(lp205
(lp206
(g22
I248
g23
S'utils.add_tag_trace(var)'
tp207
aasbsg25
g1
(g26
g3
NtRp208
(dp209
g29
S'W'
sg30
(lp210
g32
(g33
(I0
tS'b'
tRp211
(I1
(I6
I25
tg36
I00
S'\xd5\x05djv;\xb5?\x85\xdf\x7f\xc0p\xb9\xed?_\xfe\x10\x1f\xa3z\xec?<\x97\x0e)\x85\x11\xc8?\xa4U>\xac\xa8j\xc6\xbfV\xcb\xee\x83g|\xc3\xbf.:h\x7fj9\xdb\xbfn;yN\xd1b\xd0?\x8bFX%\x10\'\xee\xbf\xda*\xe1\x9e-M\xd9?\xa8\xf2\xf9\'\xc2\xc1\xb3\xbf5\x87A)\xba=\xed?\x9aj\xda\xcd\xf6\x89\xfa?\x9fe\xca\xf6\xd31\xd0\xbf\x95\xdeQj\x9d\x8a\xc8\xbf\xa8&\xf0\xce*,\xdb?H\xf6p\x1fc\xe1\xd6?fC\xc6h\x9c\x8b\xba?z\x90\x1c\x1c\x0f.\xf1?~\xa3\x10u\xb6\x93\xff\xbf\xa8\x84C\xed\x8e\xcc\xf1?\x8e%\xba\t\xcc\xe7\xd7?\xa5\xa1\n\x8eV\xfa\xe6\xbfX\xee\xbc\xe5:#\xc0?\xad\xd7\xd4Z\x8eN\xf1?\x0b:\x91\xe0\xb4H\x8d\xbf|y\x13\xca\x13\x9c\xa5?\xab\x85,\x194~ \xc0\x95\x91\x98\xec\xa8}\xf5\xbf\x1aC\xff\xab\x19\xa6\xe3\xbf\xa9CP0\xd2-\xea?\xa4V\x0b\xac\x80\xf7\x1d@\xb8\xc4f\xd7\xed\xbb\xfc\xbf\xfa6\x95\xe8\x8c\xd7\xf5\xbfxD\x86\xa9\xff\xca\xf3\xbfXw\x11\xbaj.\xfe\xbf\xd5\xddq\xe1\xdb\xae\xdc\xbf(-\xe3\x16\xdd1\xd7\xbfN\xf9\xc6\x8b\x93\xc8\xe9\xbf\x03\xea\xa7%:%%@\x9e\xae0\n\x80G\xf8\xbf$(\x04\x14I \xf0\xbf\xd8\\\x9bR\xae\xdd\x00@}\xf3 \x0c\xbe\xb8\xe3\xbf\x80\x93]\x80H\xeb#\xc0,\xe7\x91>he&@\x99x#2\xfa\xf8\xf0\xbf6\xb0\xcf\x92F8\xe0? \x10lh\xaf \xe7\xbf\x1b\xd6\xc0\x80\x8d\x83\xf6\xbf\xbb\xd3\xcb:f\xfa\xd5\xbf\xe4^\xf2\xd7\x92\xb9\xbe\xbf\xe8\xad\x8c\xc5\x86\x1d\r\xc0\x08\x08I\xf8R\xb4\xf9\xbf\xd5\xbf\x10\xfd\x898\xf6?"\x91\xc0\xbd\xb11\xd7?\xf7M\xdc\x15\xc4d\x9b?\xdc\r\xac\xbe\xc4\xdd\xcf?\x01Nsk%\xd4\x14@\x84Ir\x17\xd5\'\xe2?\x85]k\xe3X\xfa\xf7?\xfbB\x9cT+\xe0\xe6?\x1f\xfa\xf1\xeb\x98\x04\xf0?\xd9\xe5\xcf\r5 \xf0?\x91wT\x89\xf3j\xea\xbfD\xc5\x9b\x12C\xd2\xdd?\x1a\x17GcR\xd0\xd3?\x9d\xb1\xa4\x1b3t\xd5?\x86\t:\xa6\xaa\n\xe2?\x94\xc0i\xb1M\x1f\x17\xc0l*\xdb\xa8Y8\r\xc0\xc3I\x172\xc2q\xe6?\xbc>JW\x8b\x05\xee?`\x95\xf4\x14\xd4B\xf9\xbf\xac\x8f\xb986\x0e\xc1\xbf\xeb;<=\xaa\xfd\xe3\xbf/\xad\xdax=X\xe4\xbf\xcf`\x10&\x01!\x1a@9\xd4\x85\xc6\xdf\xe9\xf7\xbf\xe0e\xd0;\xf3\x1c\xf7?C\xad\x06\xdd\x1d\xe4\xd2\xbfqS\xa3\x06I\xd8\xd6\xbf\x1a\xf9\xe7\xfe\x89\x99\xfa?\x03\x9d\xf9\xe2A\x08\x0f\xc0\xbdX\x90}\xbad\xf0?\n\xfe\xf5\xe9\xbb\xe7\xf1?\x96\x97\x1b\xb1\xd1\xb3\xe0?\x87\xa6}<\x0fZ\xed?\x18\xf6\xe5\x82b\xd7\xf7?\xb4\x17\xa3Ux\xdb\xf2?h\xbb\xad\x0f\xf0\x0e\xc3\xbfP\xaa`-cT\xab\xbf\xbb\x15\xc9\x02J\xb5\xc1?\xaa\xd3\xab-\xdd\xa4\xe3?P\x9a\xc6\xbb\x04Q\xf4?\x88+\xbf\xe2\x14\xe0 @\xd2\xf3q\xca0\x90\xea?Z9\xe2\x1c\xb90\xc0?\x17\x97\x05\x047\x9e\xf4?|\xb2\x7fg\x03\x02\xe5?\xa1S\xf3\xf6tU\xeb\xbfo\rvY\x82F\xef\xbf+\xae\xf6\xf0X\x95\x04@.\xea\x9e\x14\xc3\x8b\xf1\xbf\xc0A\x9d(_\xf6\xf2\xbf\x19\x85\xe5\xef\xd2\xdc\xda\xbfi\xa5\x08\xb8+q\xda?\xd0\xb0E\x1c\xa5\xe6\xd4\xbfh\x03!JQ\t\xe4?nZ\xcc\x0c\x92\xdb\xe9\xbf\xa5K\x89\xce\r\x94\xf5\xbf:\x7f\xcb3\x9b\x1a\xe7\xbf\x9e\xa5~2V@\xf3\xbf&\x12P\xfbG.\xe0\xbfd\x91K\xdd\xadL\x01\xc0X$\x05\x18\xa47\xf6\xbfZ\x88L0\x86`\xfa\xbf\x90\xbay\xd1\x15\xdb\xf7?\x8a-\xa8\xd8+H\xea\xbf\xf2\x9a\xec\x97\x9c\xaa\xde?BhV\x9eSB\x99\xbf\xf0\xe3\x03\x9c&\xa5\xe3\xbf\x04dW\x12%\xb3\xf3\xbf\xacS\xcdcr`\xf9\xbf\xd4\xde\xa2\xa4+b\xec\xbf\xd4\xcb\xd5\xac\xed\x9f\xe7?\xd3\xb1\xd52TH\xb3?\xc6\xed>p\x1dY\x03@\xdep\x89\x11\xb4\xdf\xf5\xbf\x0c\x05\x1c\xf8\x08U\xcc\xbf\x1e\xa6=\x89\xbc\xe6\xc0\xbf!\x04J\xbbi8\xd4\xbf\x95lC\x99\xddV\x01\xc0Y\\\x8a#\x92\x8b\x82?\xc0Z\xd1w\xa5\xed\xe4\xbf\x827V\xc7\x1a\x99\xde\xbf\n&\xe4\xa8\xee\xa8\xdc\xbf.\x845\xb8Cr\xe1\xbfH\xf2\xb9\xe0F\xb0\xee\xbf\xa8Ir7\x9c\xcc\x03\xc0\xe9\xf1b\xb8\xb2\xbc\xfe\xbf`\xd6\xe9#/d\xf4\xbf\x0b\xde\xe3Z\x85\x80\xe5?Y~\xc3\x8b/\xa1\xda\xbf\xdd\xcewP\xbeo\xf0?\xc0\x17\x1a[P.\xd9\xbf\x95\xcb\xfay\x92h\xf7\xbf^\xb4M\xd4\xe2\xba\xc7\xbf\x82^$Z\n\x1b\xf1\xbfd\xb9(\xfb\xe8+\xe4\xbf'
tbasg37
I00
sg38
I00
sg39
g1
(g40
g3
NtRp212
(dp213
g43
(I00
I00
tp214
sg45
S'float64'
p215
sg47
g36
sg48
I00
sg29
Nsbsg49
Nsbsg29
S'W'
sg50
Nsg39
g212
sbasg16
(itheano.gof.utils
scratchpad
p216
(dp217
bsg132
(lp218
g175
asg134
g1
(ctheano.tensor.basic
Dot
p219
g3
NtRp220
(dp221
g148
g149
sbsbsg39
g1
(g40
g3
NtRp222
(dp223
g43
(I00
I00
tp224
sg45
S'float64'
p225
sg47
g36
sg48
I00
sg29
Nsbsbag1
(g71
g3
NtRp226
(dp227
g13
S'auto_2279018'
p228
sg15
I0
sg16
(itheano.gof.utils
scratchpad
p229
(dp230
bsg29
Nsg50
g1
(g82
g3
NtRp231
(dp232
g85
(lp233
g1
(g10
g3
NtRp234
(dp235
g13
S'auto_2279013'
p236
sg15
Nsg16
(itheano.gof.utils
scratchpad
p237
(dp238
g19
(lp239
(lp240
(g22
I248
g23
S'utils.add_tag_trace(var)'
tp241
aasbsg25
g1
(g26
g3
NtRp242
(dp243
g29
S'b'
sg30
(lp244
g32
(g33
(I0
tS'b'
tRp245
(I1
(I25
tg36
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf6n+\xee\xd0\t5@\xe5\xc1\xe1,\xa3\xff\xef\xbf\x9c\xf7\xea\xe3\xb0\xff\xef\xbf\x00\x00\x00\x00\x00\x00\x00\x00\xa7&SB\xdbT8\xc0\xce\x8cSt\xf8\xff\xef\xbf;\xb7\xc7\x94P\xd10\xc0l)\xeb\xa3\x98)\xf3\xbf#N\xd3\xaa\xf2\xfe\xef\xbf\x00\x00\x00\x00\x00\x00\x00\x00\xac\xd3P\xf6\xf9\xff\xef\xbf/f\xd6\x88\xeb|\xf1\xbf\xe9\x02\xae\xa4][\x12\xc0j\xf7\x96\x08\xf5\xda\xff\xbfm\xee\xed~`\xff\xff\xbfN\xae\xe9\xb4\xdf#9\xc0\xdbx\x8c\x14\xfe\x05\xf1\xbfJ\xb9\x80;\xa0\x95\x07\xc0\x16\x1f\nS\x84!2\xc0\xff\xffY\xf5\xd8\x05\xf3\xbf\x00\x00\x00\x00\x00\x00\x00\x00m\xa0+\x97\xfb\xff\xef\xbf\xe1;y\xe4\xfd\xff\xef\xbf'
tbasg37
I00
sg38
I00
sg39
g1
(g40
g3
NtRp246
(dp247
g43
(I00
tp248
sg45
S'float64'
p249
sg47
g36
sg48
I00
sg29
Nsbsg49
Nsbsg29
S'b'
sg50
Nsg39
g246
sbasg16
(itheano.gof.utils
scratchpad
p250
(dp251
bsg132
(lp252
g226
asg134
g1
(g135
g3
NtRp253
(dp254
g138
(lp255
sg140
(lp256
I0
asg142
(lp257
I0
asg144
g248
sg145
I00
sg146
(S'x'
I0
tp258
sg148
g149
sbsbsg39
g1
(g40
g3
NtRp259
(dp260
g43
(I01
I00
tp261
sg45
g249
sg47
g36
sg48
I00
sg29
Nsbsbasg16
(itheano.gof.utils
scratchpad
p262
(dp263
bsg132
(lp264
g164
asg134
g1
(ctheano.tensor.elemwise
Elemwise
p265
g3
NtRp266
(dp267
S'__module__'
p268
S'tensor'
p269
sS'scalar_op'
p270
g1
(ctheano.scalar.basic
Add
p271
g3
NtRp272
(dp273
S'output_types_preference'
p274
ctheano.scalar.basic
upcast_out
p275
sg148
g149
sg29
S'add'
p276
sbsg29
S'Elemwise{add,no_inplace}'
p277
sg148
g149
sS'destroy_map'
p278
(dp279
sS'nfunc_spec'
p280
(S'add'
I2
I1
tp281
sS'inplace_pattern'
p282
(dp283
sS'openmp'
p284
I00
sS'__doc__'
p285
S"elementwise addition\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Parameters\n    -----------\n    scalar_op\n        An instance of a subclass of scalar.ScalarOp which works uniquely\n        on scalars.\n    inplace_pattern\n        A dictionary that maps the index of an output to the\n        index of an input so the output is calculated inplace using\n        the input's storage. (Just like destroymap, but without the lists.)\n    nfunc_spec\n        Either None or a tuple of three elements,\n        (nfunc_name, nin, nout) such that getattr(numpy, nfunc_name)\n        implements this operation, takes nin inputs and nout outputs.\n        Note that nin cannot always be inferred from the scalar op's\n        own nin field because that value is sometimes 0 (meaning a\n        variable number of inputs), whereas the numpy function may\n        not have varargs.\n\n    Examples\n    --------\n    Elemwise(add) # represents + on tensors (x + y)\n    Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n    Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n    Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n    # along the first dimension to match the first input\n    Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n    # second dimension\n    Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n    Elemwise(log)(rand(3, 4, 5))\n\n    "
p286
sbsbsg39
g1
(g40
g3
NtRp287
(dp288
g43
(I00
I00
tp289
sg45
g199
sg47
g36
sg48
I00
sg29
Nsbsbag1
(g71
g3
NtRp290
(dp291
g13
S'auto_2279022'
p292
sg15
I0
sg16
(itheano.gof.utils
scratchpad
p293
(dp294
g19
(lp295
(lp296
(g79
I60
g80
Velse activation(lin_output)
tp297
aasbsg29
Nsg50
g1
(g82
g3
NtRp298
(dp299
g85
(lp300
g164
asg16
(itheano.gof.utils
scratchpad
p301
(dp302
bsg132
(lp303
g290
asg134
g1
(g265
g3
NtRp304
(dp305
g268
g269
sg270
g1
(ctheano.scalar.basic
Abs
p306
g3
NtRp307
(dp308
g274
ctheano.scalar.basic
same_out
p309
sg148
g149
sg29
Nsbsg29
S'Elemwise{abs_,no_inplace}'
p310
sg148
g149
sg278
(dp311
sg280
(S'abs'
I1
I1
tp312
sg282
(dp313
sg284
I00
sg285
S"|`a`|\n\n    TensorVariable overloads the `TensorVariable.__abs__` operator so that\n    this function is called when you type abs(a).\n\n    \n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Parameters\n    -----------\n    scalar_op\n        An instance of a subclass of scalar.ScalarOp which works uniquely\n        on scalars.\n    inplace_pattern\n        A dictionary that maps the index of an output to the\n        index of an input so the output is calculated inplace using\n        the input's storage. (Just like destroymap, but without the lists.)\n    nfunc_spec\n        Either None or a tuple of three elements,\n        (nfunc_name, nin, nout) such that getattr(numpy, nfunc_name)\n        implements this operation, takes nin inputs and nout outputs.\n        Note that nin cannot always be inferred from the scalar op's\n        own nin field because that value is sometimes 0 (meaning a\n        variable number of inputs), whereas the numpy function may\n        not have varargs.\n\n    Examples\n    --------\n    Elemwise(add) # represents + on tensors (x + y)\n    Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n    Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n    Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n    # along the first dimension to match the first input\n    Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n    # second dimension\n    Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n    Elemwise(log)(rand(3, 4, 5))\n\n    "
p314
sbsbsg39
g1
(g40
g3
NtRp315
(dp316
g43
(I00
I00
tp317
sg45
g199
sg47
g36
sg48
I00
sg29
Nsbsbasg16
(itheano.gof.utils
scratchpad
p318
(dp319
bsg132
(lp320
g153
asg134
g266
sbsg39
g1
(g40
g3
NtRp321
(dp322
g43
(I00
I00
tp323
sg45
g199
sg47
g36
sg48
I00
sg29
Nsbsbasg16
(itheano.gof.utils
scratchpad
p324
(dp325
bsg132
(lp326
g98
asg134
g1
(g265
g3
NtRp327
(dp328
g268
g269
sg270
g1
(ctheano.scalar.basic
Mul
p329
g3
NtRp330
(dp331
g274
g275
sg148
g149
sg29
S'mul'
p332
sbsg29
S'Elemwise{mul,no_inplace}'
p333
sg148
g149
sg278
(dp334
sg280
(S'multiply'
p335
I2
I1
tp336
sg282
(dp337
sg284
I00
sg285
S"elementwise multiplication\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Parameters\n    -----------\n    scalar_op\n        An instance of a subclass of scalar.ScalarOp which works uniquely\n        on scalars.\n    inplace_pattern\n        A dictionary that maps the index of an output to the\n        index of an input so the output is calculated inplace using\n        the input's storage. (Just like destroymap, but without the lists.)\n    nfunc_spec\n        Either None or a tuple of three elements,\n        (nfunc_name, nin, nout) such that getattr(numpy, nfunc_name)\n        implements this operation, takes nin inputs and nout outputs.\n        Note that nin cannot always be inferred from the scalar op's\n        own nin field because that value is sometimes 0 (meaning a\n        variable number of inputs), whereas the numpy function may\n        not have varargs.\n\n    Examples\n    --------\n    Elemwise(add) # represents + on tensors (x + y)\n    Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n    Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n    Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n    # along the first dimension to match the first input\n    Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n    # second dimension\n    Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n    Elemwise(log)(rand(3, 4, 5))\n\n    "
p338
sbsbsg39
g1
(g40
g3
NtRp339
(dp340
g43
(I00
I00
tp341
sg45
g199
sg47
g36
sg48
I00
sg29
Nsbsbag54
asg16
(itheano.gof.utils
scratchpad
p342
(dp343
bsg132
(lp344
g87
asg134
g220
sbsg39
g1
(g40
g3
NtRp345
(dp346
g43
(I00
I00
tp347
sg45
S'float64'
p348
sg47
g36
sg48
I00
sg29
Nsbsbag1
(g71
g3
NtRp349
(dp350
g13
S'auto_2279039'
p351
sg15
I0
sg16
(itheano.gof.utils
scratchpad
p352
(dp353
bsg29
Nsg50
g1
(g82
g3
NtRp354
(dp355
g85
(lp356
g11
asg16
(itheano.gof.utils
scratchpad
p357
(dp358
bsg132
(lp359
g349
asg134
g1
(g135
g3
NtRp360
(dp361
g138
(lp362
sg140
(lp363
I0
asg142
(lp364
I0
asg144
g44
sg145
I00
sg146
(S'x'
I0
tp365
sg148
g149
sbsbsg39
g1
(g40
g3
NtRp366
(dp367
g43
(I01
I00
tp368
sg45
g46
sg47
g36
sg48
I00
sg29
Nsbsbasg16
(itheano.gof.utils
scratchpad
p369
(dp370
bsg132
(lp371
g72
asg134
g266
sbsg39
g1
(g40
g3
NtRp372
(dp373
g43
(I00
I00
tp374
sg45
g199
sg47
g36
sg48
I00
sg29
NsbsbsS'input'
p375
g98
sbsS'L2_sqr'
p376
g1
(g71
g3
NtRp377
(dp378
g13
S'auto_2279073'
p379
sg15
I0
sg16
(itheano.gof.utils
scratchpad
p380
(dp381
g19
(lp382
(lp383
(S'<ipython-input-147-49abcd1821d4>'
p384
I134
g80
Vsq_W += T.sum(self.outputLayer.W**2)
tp385
aasbsg29
Nsg50
g1
(g82
g3
NtRp386
(dp387
g85
(lp388
g1
(g71
g3
NtRp389
(dp390
g13
S'auto_2279062'
p391
sg15
I0
sg16
(itheano.gof.utils
scratchpad
p392
(dp393
g19
(lp394
(lp395
(g384
I133
g80
Vsq_W += T.sum(self.hiddenLayers[i].W**2)
tp396
aasbsg29
Nsg50
g1
(g82
g3
NtRp397
(dp398
g85
(lp399
g1
(g117
g3
NtRp400
(dp401
g13
S'auto_58'
p402
sg15
Nsg16
(itheano.gof.utils
scratchpad
p403
(dp404
g123
Nsbsg29
NsS'cached'
p405
I01
sg39
g1
(g40
g3
NtRp406
(dp407
g43
(tsg45
S'float32'
p408
sg47
g127
sg48
I00
sg29
Nsbsg128
g32
(g33
(I0
tS'b'
tRp409
(I1
(tg127
I00
S'\x00\x00\x00\x00'
tbsbag1
(g71
g3
NtRp410
(dp411
g13
S'auto_2279057'
p412
sg15
I0
sg16
(itheano.gof.utils
scratchpad
p413
(dp414
g19
(lp415
(lp416
(g384
I133
g80
Vsq_W += T.sum(self.hiddenLayers[i].W**2)
tp417
aasbsg29
Nsg50
g1
(g82
g3
NtRp418
(dp419
g85
(lp420
g1
(g71
g3
NtRp421
(dp422
g13
S'auto_2279056'
p423
sg15
I0
sg16
(itheano.gof.utils
scratchpad
p424
(dp425
g19
(lp426
(lp427
(g384
I133
g80
Vsq_W += T.sum(self.hiddenLayers[i].W**2)
tp428
aasbsg29
Nsg50
g1
(g82
g3
NtRp429
(dp430
g85
(lp431
g200
ag1
(g71
g3
NtRp432
(dp433
g13
S'auto_2279055'
p434
sg15
I0
sg16
(itheano.gof.utils
scratchpad
p435
(dp436
bsg29
Nsg50
g1
(g82
g3
NtRp437
(dp438
g85
(lp439
g1
(g117
g3
NtRp440
(dp441
g13
S'auto_51'
p442
sg15
Nsg16
(itheano.gof.utils
scratchpad
p443
(dp444
g123
Nsbsg29
Nsg405
I01
sg39
g1
(g40
g3
NtRp445
(dp446
g43
(tsg45
S'int8'
p447
sg47
g35
(S'i1'
I0
I1
tRp448
(I3
S'|'
NNNI-1
I-1
I0
tbsg48
I00
sg29
Nsbsg128
g32
(g33
(I0
tS'b'
tRp449
(I1
(tg448
I00
S'\x02'
tbsbasg16
(itheano.gof.utils
scratchpad
p450
(dp451
bsg132
(lp452
g432
asg134
g1
(g135
g3
NtRp453
(dp454
g138
(lp455
sg140
(lp456
sg142
(lp457
I0
aI1
asg144
(tsg145
I00
sg146
(S'x'
S'x'
tp458
sg148
g149
sbsbsg39
g1
(g40
g3
NtRp459
(dp460
g43
(I01
I01
tp461
sg45
g447
sg47
g448
sg48
I00
sg29
Nsbsbasg16
(itheano.gof.utils
scratchpad
p462
(dp463
bsg132
(lp464
g421
asg134
g1
(g265
g3
NtRp465
(dp466
g268
g269
sg270
g1
(ctheano.scalar.basic
Pow
p467
g3
NtRp468
(dp469
g274
g275
sg148
g149
sg29
S'pow'
p470
sbsg29
S'Elemwise{pow,no_inplace}'
p471
sg148
g149
sg278
(dp472
sg280
(S'power'
I2
I1
tp473
sg282
(dp474
sg284
I00
sg285
S"elementwise power\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Parameters\n    -----------\n    scalar_op\n        An instance of a subclass of scalar.ScalarOp which works uniquely\n        on scalars.\n    inplace_pattern\n        A dictionary that maps the index of an output to the\n        index of an input so the output is calculated inplace using\n        the input's storage. (Just like destroymap, but without the lists.)\n    nfunc_spec\n        Either None or a tuple of three elements,\n        (nfunc_name, nin, nout) such that getattr(numpy, nfunc_name)\n        implements this operation, takes nin inputs and nout outputs.\n        Note that nin cannot always be inferred from the scalar op's\n        own nin field because that value is sometimes 0 (meaning a\n        variable number of inputs), whereas the numpy function may\n        not have varargs.\n\n    Examples\n    --------\n    Elemwise(add) # represents + on tensors (x + y)\n    Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n    Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n    Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n    # along the first dimension to match the first input\n    Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n    # second dimension\n    Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n    Elemwise(log)(rand(3, 4, 5))\n\n    "
p475
sbsbsg39
g1
(g40
g3
NtRp476
(dp477
g43
(I00
I00
tp478
sg45
g199
sg47
g36
sg48
I00
sg29
Nsbsbasg16
(itheano.gof.utils
scratchpad
p479
(dp480
bsg132
(lp481
g410
asg134
g1
(ctheano.tensor.elemwise
Sum
p482
g3
NtRp483
(dp484
S'acc_dtype'
p485
g199
sg45
g199
sg148
g149
sg270
g272
sS'axis'
p486
Nsbsbsg39
g1
(g40
g3
NtRp487
(dp488
g43
(tsg45
g199
sg47
g36
sg48
I00
sg29
Nsbsbasg16
(itheano.gof.utils
scratchpad
p489
(dp490
bsg132
(lp491
g389
asg134
g266
sbsg39
g1
(g40
g3
NtRp492
(dp493
g43
(tsg45
g199
sg47
g36
sg48
I00
sg29
Nsbsbag1
(g71
g3
NtRp494
(dp495
g13
S'auto_2279069'
p496
sg15
I0
sg16
(itheano.gof.utils
scratchpad
p497
(dp498
g19
(lp499
(lp500
(g384
I134
g80
Vsq_W += T.sum(self.outputLayer.W**2)
tp501
aasbsg29
Nsg50
g1
(g82
g3
NtRp502
(dp503
g85
(lp504
g1
(g71
g3
NtRp505
(dp506
g13
S'auto_2279068'
p507
sg15
I0
sg16
(itheano.gof.utils
scratchpad
p508
(dp509
g19
(lp510
(lp511
(g384
I134
g80
Vsq_W += T.sum(self.outputLayer.W**2)
tp512
aasbsg29
Nsg50
g1
(g82
g3
NtRp513
(dp514
g85
(lp515
g54
ag1
(g71
g3
NtRp516
(dp517
g13
S'auto_2279067'
p518
sg15
I0
sg16
(itheano.gof.utils
scratchpad
p519
(dp520
bsg29
Nsg50
g1
(g82
g3
NtRp521
(dp522
g85
(lp523
g440
asg16
(itheano.gof.utils
scratchpad
p524
(dp525
bsg132
(lp526
g516
asg134
g1
(g135
g3
NtRp527
(dp528
g138
(lp529
sg140
(lp530
sg142
(lp531
I0
aI1
asg144
(tsg145
I00
sg146
(S'x'
S'x'
tp532
sg148
g149
sbsbsg39
g1
(g40
g3
NtRp533
(dp534
g43
(I01
I01
tp535
sg45
g447
sg47
g448
sg48
I00
sg29
Nsbsbasg16
(itheano.gof.utils
scratchpad
p536
(dp537
bsg132
(lp538
g505
asg134
g465
sbsg39
g1
(g40
g3
NtRp539
(dp540
g43
(I00
I00
tp541
sg45
g199
sg47
g36
sg48
I00
sg29
Nsbsbasg16
(itheano.gof.utils
scratchpad
p542
(dp543
bsg132
(lp544
g494
asg134
g1
(g482
g3
NtRp545
(dp546
g485
g199
sg45
g199
sg148
g149
sg270
g272
sg486
Nsbsbsg39
g1
(g40
g3
NtRp547
(dp548
g43
(tsg45
g199
sg47
g36
sg48
I00
sg29
Nsbsbasg16
(itheano.gof.utils
scratchpad
p549
(dp550
bsg132
(lp551
g377
asg134
g266
sbsg39
g1
(g40
g3
NtRp552
(dp553
g43
(tsg45
g199
sg47
g36
sg48
I00
sg29
Nsbsbsg70
g72
sS'hiddenLayers'
p554
(lp555
g1
(g7
g3
NtRp556
(dp557
S'b'
g234
sg51
ctheano.tensor.nnet.nnet
relu
p558
sg52
(lp559
g200
ag234
asS'W'
g200
sg70
g98
sg375
g186
sbasg52
(lp560
g200
ag234
ag54
ag11
asS'hist_grad'
p561
(lp562
g1
(g10
g3
NtRp563
(dp564
g13
S'auto_2279074'
p565
sg15
Nsg16
(itheano.gof.utils
scratchpad
p566
(dp567
g19
(lp568
(lp569
(g22
I248
g23
S'utils.add_tag_trace(var)'
tp570
aasbsg25
g1
(g26
g3
NtRp571
(dp572
g29
Nsg30
(lp573
g32
(g33
(I0
tS'b'
tRp574
(I1
(I6
I25
tg36
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x9cj\xa0\x9e.\x84\xe3A\x8f\xe6y\x05\xb7z\x03@\x05U*\xab2\xf1M?\x00\x00\x00\x00\x00\x00\x00\x00\xfcZ\xa2K\xf6L\x08BaE|\xb1\xd8\x8e\x1a@L\x14/\xf9\x8f\x9c\xa7A\x96\x16ir<\xc56@n\xa3\xb2\xc37x\xd8?\x00\x00\x00\x00\x00\x00\x00\x00\x15\xe6p?\x10\xa6\xbf?\xf3\xe1\xb7]\xc3\xb4\x16@\xfb5\xe5\xb9\x1e\xd7\xb5A\x1d\xb20\xee\xda\xd2\xac@\xed\xea\t~\xa5+\xb0@\x07\xfaL\x1f\xf6$\xe2A\x8f+\xa7\xbeIy*@\xe3pu\xdf5\xb3\xa3AO\x04\x10/\xb6\xc1\xf2A\xf3\x9d\xabu\xa6\xbd\x00@\x00\x00\x00\x00\x00\x00\x00\x00\xca\x88\x1f\xd2\xfc\x1e\x9b@\xaau\x13\x99\xb4\n\xea?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x005O+\x9c8\xfc\xe9A\xc7\x00\x99*\x7f\xb6\xdf?3kM4@>\xe6?\x00\x00\x00\x00\x00\x00\x00\x00qXy\xb2f:\x0fB\xa4)\xdb\xbc\xea\x17S@\xd8v\x82\xfb\x1c\xd0\xa2A\xad\xaaB\x0e\xa1\x1f\x92@m\x81\xbb\x81}\xf8\xaf?\x00\x00\x00\x00\x00\x00\x00\x00\x08Kif\xcd\x14e@~k\xbdn\xe9\xb7v@\x1b\x8f:!?\xd4\xb3Ax\xdeqw\xbb\xce\x94@\x07\x8fz\xa5~\xd3\x96@l\x80.^M}\xeaA)\xd5y\x90\xb0\x9f\x81@G\x14\x89szU\x8fA\xaen{MH\x9c\xf8AD[\x96\x85`B[@\x00\x00\x00\x00\x00\x00\x00\x00\x06-\xcc\x80`\x03k@\x8d\xaa\xd1\xfe\x9cq\x94@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x89\xfb\xead\x87\x8e\xc5A\xdb\xac_\xe5J5\x95?\xcdtc\xe6\x94\xd8\x0f?\x00\x00\x00\x00\x00\x00\x00\x00\x89B\xc5\x9c\xf5\x94\xe8Ar\xea*\xd0\xdd\x94\xbe?\xe6\xff\x17\xfefM\xacA\x8e\xf3HT\xdf\x97w@@\xbeL\xe9\xe2\xd38?\x00\x00\x00\x00\x00\x00\x00\x00\xe9B\xcb\xec\x8a\x11Q@\x04\x9f\ry\x82PW@\xf2\x0eC\xa18a\x92A\xdc\xc2TPu\xa6\x90@C+\x9f1P\x8f\x92@h\xda\xd9\x0en\xc3\xc8A\xc7o\x05+\x10\x15b@Do\x9c\xac\xee\x1a\x96A\xe2\xe3\xf5\xfb0=\xd4A\xbc\xfc\x98N-:A@\x00\x00\x00\x00\x00\x00\x00\x00\xcd\xedC\xda\x8c\xe9\x9c?5h\x93\xab\x99\xcdw@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x006[\x98\x1eM\xbf\x91Av\x0c\xf7\x07\xed\xceA?E\xbb\xfc\x9e|\x16\xf7>\x00\x00\x00\x00\x00\x00\x00\x00\xf4\xdb+\xb0\x06T\xb2A\x12\xc6\xbag\xc5\xbb\x12?a\x0eU\xb3\x04StA\xc5i\xa4\xa9|SS@U\xcf\x89\xd8\x8b\xde2?\x00\x00\x00\x00\x00\x00\x00\x00\xfa\xae"\x82q\xf1*@\xb6\xec\x16\xb9LQ3@d\xde\xfc\xec\xbe"aA\xe0\x05\xc2\xd8@\xceA@\xc6J\xa2\x94\x93&C@\x01h\td\xbb,\x94A?\xdd\xc9\xdc\x8c\xb9=@\xe3\xd7\x04\x0b\xb1[YA\xf3c\xac\xb4\xab\x83\xa0A\x8dh{l\x80\x19\x1c@\x00\x00\x00\x00\x00\x00\x00\x00\xa2i\x99&\x8dQ\xa9?\x1e\xf1Y\xca\xc3\xeaR@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xdfk\xd0I\xde\')Bj\xb3i\x8b\xa6[\x1c@\xe4\x8e\r\xff\x9b\x1b\x1c@\x00\x00\x00\x00\x00\x00\x00\x00\x1d\xb1\xf1\xf1Q\xd6MB%\x86d\x90\x02@\x95@\xc79,A=8\xe2A\xfeL\xbc\x92\x99-\xcb@\x8be\xb4KE\xee\xeb?\x00\x00\x00\x00\x00\x00\x00\x00\xbb\x01\x8fl\xcd\x04\x9b@O\xee\x84\xeb\x7f\r\xb1@\xec\x9a(\xa1\xd2\xed\xecAa\rmG=~\xd8@\x83=\x98\xb1\xa2\x17\xdb@a\x8a]\x11\xdc\xe7*B\\\x16sq\xe8W\xba@\xc4\xf3\xa2\x03\xa1\x9e\xd3A\x96lnS\x9c\xd27B1\x95\xf3\x94\xa2p\x94@\x00\x00\x00\x00\x00\x00\x00\x00Z\xaa\x08\xdb\x80\x7f\xb1@\xc6\xdc\xf8\xe3\x98\x11\xce@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00w\xf4G\x06\x84\x19\xc0Aa5\x06&-&\xb2?\x92\xe0;\xa30\xfd\xb1?\x00\x00\x00\x00\x00\x00\x00\x00\x01{g]\x86\x18\xe3Ab\xf3a{63+@4i\x05\xed9RwA\xd5\xf3\xb5*\xddda@\xc06iY,\xe0\x81?\x00\x00\x00\x00\x00\x00\x00\x00\xcaHQ\xe9\xc0J1@\xbfO\x06\xf0\xd6\xd3E@B\xd3\xbd\x00\xba\x83\x82A\xccX\x81\t\xe8Yo@i\xfe#\x86\xceVq@\x08\xd4d\xec:8\xc1A\x06-5\xe2\x19\xdcP@\xd0\x0e\xe5\x0e\xf7\x1ciA`N\xb6\xbc8~\xceA\xf8\xbe`\xdd\xc5)*@\x00\x00\x00\x00\x00\x00\x00\x00\xf7+\xb9\xa7\xc3eF@\xd9OvTv>c@'
tbasg37
I00
sg38
I00
sg39
g1
(g40
g3
NtRp575
(dp576
g43
(I00
I00
tp577
sg45
S'float64'
p578
sg47
g36
sg48
I00
sg29
Nsbsg49
Nsbsg29
Nsg50
Nsg39
g575
sbag1
(g10
g3
NtRp579
(dp580
g13
S'auto_2279075'
p581
sg15
Nsg16
(itheano.gof.utils
scratchpad
p582
(dp583
g19
(lp584
(lp585
(g22
I248
g23
S'utils.add_tag_trace(var)'
tp586
aasbsg25
g1
(g26
g3
NtRp587
(dp588
g29
Nsg30
(lp589
g32
(g33
(I0
tS'b'
tRp590
(I1
(I25
tg36
I00
S"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00%)\x83U\xdc[\xb4A\xa2%\x93A\xaa!\xaa?\x92\xe0;\xa30\xfd\xb1?\x00\x00\x00\x00\x00\x00\x00\x00\x93\xbe\x86\xf8\x99\x1d\xd8AM\xa1\xc0v\xdd\xe5\x1e@\x0cn\xdb\xe2\xae\x11lA{\x17|1\xd3\xafV@|\xe8\x83\xd1\xcb\xd3x?\x00\x00\x00\x00\x00\x00\x00\x00I\x14Jm\xd4 (@\x0b,\xe1\x15\xc8(<@\x82\xebi\x1b\xc9n}A\xf7\xe1\x89N \x0e`@\x03\x9dp\xf3n\xb1a@\xbc\xc8t\x08\x0bq\xb4A\x94!/\xb8\xaf\x9cE@%'OXg\xe4[A\xa6\xdd?\x17\xacI\xc3A\xb3\x02\x16{\x97\n!@\x00\x00\x00\x00\x00\x00\x00\x00\xe7\xd5jB\x91\x9e6@Sb\x8f5$\xc1X@"
tbasg37
I00
sg38
I00
sg39
g1
(g40
g3
NtRp591
(dp592
g43
(I00
tp593
sg45
S'float64'
p594
sg47
g36
sg48
I00
sg29
Nsbsg49
Nsbsg29
Nsg50
Nsg39
g591
sbag1
(g10
g3
NtRp595
(dp596
g13
S'auto_2279076'
p597
sg15
Nsg16
(itheano.gof.utils
scratchpad
p598
(dp599
g19
(lp600
(lp601
(g22
I248
g23
S'utils.add_tag_trace(var)'
tp602
aasbsg25
g1
(g26
g3
NtRp603
(dp604
g29
Nsg30
(lp605
g32
(g33
(I0
tS'b'
tRp606
(I1
(I25
I1
tg36
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa7YN\xde\x04\xab\x02B\x0f<\x83"6b\x11@Yy\xf1\xe6\x0e\x1f\xa7?\x00\x00\x00\x00\x00\x00\x00\x00~s4C\x155\xb6A\xf4C\xf8\x80\xce\x87\xa7@\x15\xb8\x17zR\xafqA\\\x05\xab$\x90\x93\xc6@8\r\x1607\x02\xc9?\x00\x00\x00\x00\x00\x00\x00\x004\xd0q\xa2^\x9bY@~a\xa4\x83uy\xe2@\xf2\xa9\xce\x88\xef=\x9dAc`\xbcE\xdb\xeb\xe7@\x82\xe5o\xb6\x08\n\xe6@\xf5\x99Z\xd7\xc7\x86\xc3A\xc7\xda\x93\xd0\xe2\x85\xd8@\xd8\xe4\x1f\xd0\xa3\xeeYA\x97\xa8(\xbc\xad\x9d\xe3A\'\xfc\xd0\x86\x0f\x1e\xd8@\x00\x00\x00\x00\x00\x00\x00\x00"]\xecj\x02\xa19@:!;\xaf)\xdb\xb2@'
tbasg37
I00
sg38
I00
sg39
g1
(g40
g3
NtRp607
(dp608
g43
(I00
I00
tp609
sg45
S'float64'
p610
sg47
g36
sg48
I00
sg29
Nsbsg49
Nsbsg29
Nsg50
Nsg39
g607
sbag1
(g10
g3
NtRp611
(dp612
g13
S'auto_2279077'
p613
sg15
Nsg16
(itheano.gof.utils
scratchpad
p614
(dp615
g19
(lp616
(lp617
(g22
I248
g23
S'utils.add_tag_trace(var)'
tp618
aasbsg25
g1
(g26
g3
NtRp619
(dp620
g29
Nsg30
(lp621
g32
(g33
(I0
tS'b'
tRp622
(I1
(I1
tg36
I00
S'\xbbw\xdc\xc9uaaA'
tbasg37
I00
sg38
I00
sg39
g1
(g40
g3
NtRp623
(dp624
g43
(I00
tp625
sg45
S'float64'
p626
sg47
g36
sg48
I00
sg29
Nsbsg49
Nsbsg29
Nsg50
Nsg39
g623
sbasS'L1'
p627
g1
(g71
g3
NtRp628
(dp629
g13
S'auto_2279050'
p630
sg15
I0
sg16
(itheano.gof.utils
scratchpad
p631
(dp632
g19
(lp633
(lp634
(S'/usr/local/lib/python2.7/site-packages/numpy/core/_methods.py'
p635
I32
S'_sum'
p636
S'return umr_sum(a, axis, dtype, out, keepdims)'
tp637
aasbsg29
Nsg50
g1
(g82
g3
NtRp638
(dp639
g85
(lp640
g1
(g71
g3
NtRp641
(dp642
g13
S'auto_2279043'
p643
sg15
I0
sg16
(itheano.gof.utils
scratchpad
p644
(dp645
g19
(lp646
(lp647
(g384
I127
g80
Vabs_W = np.append(abs_W, np.abs(self.hiddenLayers[i].W))
tp648
aasbsg29
Nsg50
g1
(g82
g3
NtRp649
(dp650
g85
(lp651
g200
asg16
(itheano.gof.utils
scratchpad
p652
(dp653
bsg132
(lp654
g641
asg134
g304
sbsg39
g1
(g40
g3
NtRp655
(dp656
g43
(I00
I00
tp657
sg45
g199
sg47
g36
sg48
I00
sg29
Nsbsbag1
(g71
g3
NtRp658
(dp659
g13
S'auto_2279046'
p660
sg15
I0
sg16
(itheano.gof.utils
scratchpad
p661
(dp662
g19
(lp663
(lp664
(g384
I128
g80
Vabs_W = np.append(abs_W, np.abs(self.outputLayer.W))
tp665
aasbsg29
Nsg50
g1
(g82
g3
NtRp666
(dp667
g85
(lp668
g54
asg16
(itheano.gof.utils
scratchpad
p669
(dp670
bsg132
(lp671
g658
asg134
g304
sbsg39
g1
(g40
g3
NtRp672
(dp673
g43
(I00
I00
tp674
sg45
g199
sg47
g36
sg48
I00
sg29
Nsbsbasg16
(itheano.gof.utils
scratchpad
p675
(dp676
bsg132
(lp677
g628
asg134
g266
sbsg39
g1
(g40
g3
NtRp678
(dp679
g43
(I00
I00
tp680
sg45
g199
sg47
g36
sg48
I00
sg29
Nsbsbsg375
g186
sb.